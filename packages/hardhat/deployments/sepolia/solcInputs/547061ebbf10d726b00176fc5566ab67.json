{
  "language": "Solidity",
  "sources": {
    "contracts/AdminManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Structures.sol\";\n\ncontract AdminManagement is Structures{\n\n    // getNumberofDoctors\n    function getNumberofDoctors(address _admin) public view onlyAdmin(_admin) returns (uint) {\n        return doctorList.length;\n    }\n\n    // getDoctor\n    function getDoctors(address _admin) public view onlyAdmin(_admin) returns(address[] memory) {\n        return doctorList;\n    }\n\n    // getNumberofPatients\n    function getNumberofPatients(address _admin) public view onlyAdmin(_admin) returns (uint) {\n        return patientList.length;\n    }\n\n    // get requested list\n    function getRequestedDoctorsList(address _admin) public view onlyAdmin(_admin) returns (address[] memory) {\n      return requestedDoctorList;\n    }\n\n    // confirm Doctor registration request\n    function confirmRegistration(address _doctor) public onlyAdmin(msg.sender) {\n      require(!isDoctor[_doctor], \"This person is already a doctor\");\n\n      bool check = false;\n\n      for (uint i = 0; i < requestedDoctorList.length; i++) {\n          if (requestedDoctorList[i] == _doctor) {\n            check = true;\n          }\n\n          if (check == true && i < requestedDoctorList.length - 1) {\n            requestedDoctorList[i] = requestedDoctorList[i + 1];\n          }\n      }\n\n      requestedDoctorList.pop();\n\n      if (check == false) {\n        revert(\"This address has not registered yet\");\n      } else {\n        doctorList.push(_doctor);\n        isDoctor[_doctor] = true;\n      }     \n    }\n\n    // Remove Doctor\n    function removeDoctors(address _doctor) public onlyAdmin(msg.sender) {\n        require(isDoctor[_doctor], \"This person is not a doctor\");\n\n        bool mark = false;\n\n        // Remove from the general array\n        for (uint i = 0; i < doctorList.length; i++) {\n          if (doctorList[i] == _doctor) {\n              mark = true;\n          }\n\n          if (mark == true && i < doctorList.length - 1) {\n            doctorList[i] = doctorList[i + 1];\n          }\n        }\n\n        doctorList.pop();\n\n        // Remove from the patients' lists\n        for (uint i = 0; i < patientList.length; i++) {\n          if (patients[patientList[i]].authorizedDoctors[_doctor]) {\n\n            address[] storage list = patients[patientList[i]].doctorsList;\n\n            bool check = false;\n\n            for (uint j = 0; j < list.length; j++) {\n              if (list[i] == _doctor) {\n                check = true;\n              }\n\n              if (check == true) {\n                list[i] = list[i + 1];\n              }\n            }\n\n            list.pop();\n          }\n        }\n\n        isDoctor[_doctor] = false;\n    }\n}"
    },
    "contracts/DoctorManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Structures.sol\";\n\ncontract DoctorManagement is Structures{\n\n    // Doctors set their profile\n    function setDoctorProfile(string memory _name, string memory _major) public payable {\n\n        require(!isDoctor[msg.sender], \"Doctor profile already exists!\");\n        require(!isPatient[msg.sender], \"You are already a patient!\");\n\n        for (uint i = 0; i < requestedDoctorList.length; i++) {\n          if (msg.sender == requestedDoctorList[i]) {\n            revert(\"You already requested to be a doctor\");\n          }\n        }\n\n        Doctor storage doctor = doctors[msg.sender];\n        doctor.name = _name;\n        doctor.major = _major;\n\n        requestedDoctorList.push(msg.sender);\n    }\n\n    // Request from doctors\n    function requestAccess(address _patient) public payable {\n\n      require(isDoctor[msg.sender], \"Only doctors can request access\");\n      require(isPatient[_patient], \"The address should be a patient\");\n      \n      Patient storage patient = patients[_patient];\n\n      for (uint i = 0; i < patient.requestedDoctors.length; i++) {\n        if (msg.sender == patient.requestedDoctors[i]) {\n            revert(\"You have already required access\");\n        }\n      }\n\n      for (uint i = 0; i < patient.doctorsList.length; i++) {\n        if (msg.sender == patient.doctorsList[i]) {\n            revert(\"You are already in the doctor list\");\n        }\n      }\n\n      patients[_patient].requestedDoctors.push(msg.sender);\n    }\n\n    // Doctor retrieves list of patients\n    function getPatientsList(address _doctor) public view returns(address[] memory) {\n\n        return doctors[_doctor].patientsList;\n    }\n\n    // Authorized doctors add record to patient's profile\n    function addRecord(address _patient, string memory _description, string memory _diagnosis, string memory _treatment, string memory _imageUrl) public onlyAuthorizedDoctors(_patient) {\n\n        require(isDoctor[msg.sender], \"Only doctors can create new record\");\n        require(isPatient[_patient], \"That address is not a patient\");\n\n        Patient storage patient = patients[_patient];\n\n        patient.records.push(Record({\n            id: patient.recordCount,\n            description: _description,\n            diagnosis: _diagnosis,\n            treatment: _treatment,\n            imageUrl: _imageUrl,\n            createdTimestamp: block.timestamp\n        }));\n\n        patient.recordCount++;\n\n        emit RecordAdded(_patient, msg.sender, block.timestamp);\n    }\n\n    // Retrieve requested appointments\n    function getRequestedAppointments(address _doctor) public view returns(Appointment[] memory) {\n\n        require (isDoctor[_doctor], \"Only doctors can access requested appointments\");\n\n        return doctors[_doctor].requestedAppointments;\n    }\n\n    // Accept appointment\n    function acceptAppointment(address _patient) public {\n        \n        require(isDoctor[msg.sender], \"Only doctors can accept appointments\");\n\n        Appointment[] storage requested = doctors[msg.sender].requestedAppointments;\n\n        for (uint i = 0; i < requested.length; i++) {\n            if (requested[i].patientaddr == _patient) {\n\n                sortAppointments(doctors[msg.sender].appointments, requested[i]);\n                sortAppointments(patients[_patient].appointments, requested[i]);\n\n                requested[i] = requested[requested.length - 1];\n                requested.pop();\n\n                break;\n            }\n        }\n    }\n\n    // Sort appointments according to time\n    function sortAppointments(Appointment[] storage appointments, Appointment memory requested) private {\n\n        uint point = 0;\n        bool shift = false;\n\n        for (uint i = 0; i < appointments.length; i++) {\n            if (requested.date < appointments[i].date || (requested.date == appointments[i].date && requested.time <= appointments[i].time)) {\n                point = i;\n                shift = true;\n                break;\n            }\n        }\n\n        appointments.push(requested);\n\n        if (shift == true) {\n\n            for (uint i = appointments.length - 1; i > point; i--) {\n                appointments[i] = appointments[i - 1];\n            }\n\n            appointments[point] = requested;\n        }\n    }\n}"
    },
    "contracts/HealthcareSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Structures.sol\";\nimport \"./DoctorManagement.sol\";\nimport \"./PatientManagement.sol\";\nimport \"./AdminManagement.sol\";\n\ncontract HealthcareSystem is Structures, DoctorManagement, PatientManagement, AdminManagement {\n\n    constructor () {\n        isAdmin[0x49745EF0F5E06f3e0d3F6CcB590F100726202011] = true;\n    }\n\n// Functions for both\n\n    // Get appointments\n    function getAppointments(address _addr) public view returns(Appointment[] memory) {\n        if (isPatient[_addr]) {\n            return patients[_addr].appointments;\n        } else if (isDoctor[_addr]) {\n            return doctors[_addr].appointments;\n        }\n\n        Appointment[] memory emptyAppointments = new Appointment[](0);\n\n        return emptyAppointments;\n    }\n\n    // Get Patient's info\n    function getPatientInfo(address _doctor, address _patient) public view\n        returns(\n            string memory name,\n            string memory phone,\n            string memory dob,\n            string memory gender,\n            string memory bloodType,\n            string memory height,\n            string memory weight,\n            string memory houseAddr,\n            string memory allergies,\n            Record[] memory records,\n            uint recordCount\n        ) \n    {\n\n        if (isDoctor[_doctor]) {\n            require(patients[_patient].authorizedDoctors[_doctor], \"You need to be authorized to view this patient's record\");\n        } else {\n            require(_doctor == _patient);   // Both address is from the patient, who want to view their own record\n        }\n\n        Patient storage patient = patients[_patient];\n\n        return (\n            patient.name,\n            patient.phone,\n            patient.dob,\n            patient.gender,\n            patient.bloodType,\n            patient.height,\n            patient.weight,\n            patient.houseAddr,\n            patient.allergies,\n            patient.records,\n            patient.recordCount\n        );\n    }\n\n    // Get Doctor's info\n    function getDoctorInfo(address _patient, address _doctor) public view \n        returns(\n            string memory name,\n            string memory major\n        ) \n    {\n        if (isDoctor[_doctor]  && isPatient[_patient]) {\n            require(patients[_patient].authorizedDoctors[_doctor], \"This doctor is not authorized to work with you\");\n        } else {\n            require(_doctor == _patient);   // Both address is from the doctor, who want to view their own profle or the admin\n        }\n        \n\n        Doctor storage doctor = doctors[_doctor];\n\n        return (\n            doctor.name,\n            doctor.major\n        );\n    }\n}"
    },
    "contracts/PatientManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Structures.sol\";\n\ncontract PatientManagement is Structures {\n\n    // Patients set their profile\n    function setPatientProfile(\n        string memory _name,\n        string memory _phone,\n        string memory _dob,\n        string memory _gender,\n        string memory _bloodType,\n        string memory _height,\n        string memory _weight,\n        string memory _houseAddr,\n        string memory _allergies\n    ) public payable {\n        require(!isPatient[msg.sender], \"Patient profile already exists\");\n        require(!isDoctor[msg.sender], \"You are already a doctor!\");\n\n        Patient storage patient = patients[msg.sender];\n\n        patient.name = _name;\n        patient.phone = _phone;\n        patient.dob = _dob;\n        patient.gender = _gender;\n        patient.bloodType = _bloodType;\n        patient.height = _height;\n        patient.weight = _weight;\n        patient.houseAddr = _houseAddr;\n        patient.allergies = _allergies;\n        patient.recordCount = 0;\n\n        isPatient[msg.sender] = true;\n\n        patientList.push(msg.sender);\n    }\n\n    // Patient retrieves requested doctors\n    function getRequestedDoctors(address _patient) public view returns(address[] memory) {\n\n        //require(isPatient[_patient], \"This should be a patient\");\n\n        Patient storage patient = patients[_patient];\n\n        return patient.requestedDoctors;\n    }\n\n    // Patients grant access to doctors\n    function grantAccess(address _doctor) public {\n\n        require(isPatient[msg.sender], \"Only patients can grant access\");\n\n        address[] storage requested = patients[msg.sender].requestedDoctors;\n\n        bool check = false;\n\n        for (uint i = 0; i < requested.length; i++) {\n          if (requested[i] == _doctor) {\n            requested[i] = requested[requested.length - 1];\n            requested.pop();\n            check = true;\n            break;\n          }\n        }\n\n        if (check == true) {\n            patients[msg.sender].authorizedDoctors[_doctor] = true;       // Authorize this doctor\n\n            doctors[_doctor].patientsList.push(msg.sender);               // Add this patient to the list of the doctor\n\n            patients[msg.sender].doctorsList.push(_doctor);              // Add this doctor to the list of the patient\n\n        } else {\n            emit GrantAccessFailed(msg.sender, _doctor);\n        }\n    }\n\n    // Patients revoke access to doctors\n    function revokeAccess(address _doctors) public {\n\n        require(isPatient[msg.sender], \"Only patients can revoke access\");\n\n        patients[msg.sender].authorizedDoctors[_doctors] = false;\n    }\n\n    // Patient retrieves list of doctors\n    function getDoctorsList(address _patient) public view returns(address[] memory) {\n\n        Patient storage patient = patients[_patient];\n\n        return patient.doctorsList;\n    }\n\n    // Request Appointments\n    function requestAppointment(address _doctor, uint _date, uint _time, string memory _description) public {\n\n        require(patients[msg.sender].authorizedDoctors[_doctor], \"This doctor is not authorized to work with you\");\n\n        Doctor storage doctor = doctors[_doctor];\n\n        for (uint i = 0; i < doctor.requestedAppointments.length; i++) {\n            if (msg.sender == doctor.requestedAppointments[i].patientaddr) {\n                revert (\"You already requested this doctor\");\n            }\n        }\n\n        for (uint i = 0; i < doctor.appointments.length; i++) {\n            if (msg.sender == doctor.appointments[i].patientaddr) {\n                revert (\"You already have an appointment with this doctor\");\n            }\n        }\n\n        doctor.requestedAppointments.push(Appointment ({\n            patientaddr: msg.sender,\n            doctoraddr: _doctor,\n            date: _date,\n            time: _time,\n            description: _description\n        }));\n    }\n}"
    },
    "contracts/Structures.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract Structures {\n    struct Patient {\n        string name;\n        string phone;\n        string dob;\n        string gender;\n        string bloodType;\n        string height;\n        string weight;\n        string houseAddr;\n        string allergies;\n        Record[] records;\n        uint recordCount;\n        mapping(address => bool) authorizedDoctors;\n        address[] requestedDoctors;\n        address[] doctorsList;\n        Appointment[] appointments;\n    }\n\n    struct Doctor {\n        string name;\n        string major;\n        address[] patientsList;\n        Appointment[] requestedAppointments;\n        Appointment[] appointments;\n    }\n\n    struct Admin {\n        string name;\n    }\n\n    struct Record {\n        uint id;\n        string description;\n        string diagnosis;\n        string treatment;\n        string imageUrl;\n        uint createdTimestamp;\n    }\n\n    struct Appointment {\n        address patientaddr;\n        address doctoraddr;\n        uint date;\n        uint time;\n        string description;\n    }\n\n    address[] public patientList;\n    address[] public doctorList;\n    address[] public requestedDoctorList;\n\n    mapping(address => Patient) public patients;\n    mapping(address => Doctor) public doctors;\n\n    mapping(address => bool) public isDoctor;\n    mapping(address => bool) public isPatient;\n    mapping(address => bool) public isAdmin;\n\n    event RecordAdded(address patient, address doctor, uint timestamp);\n    event RecordUpdated(address patient, address doctor, uint timestamp);\n    event GrantAccessFailed(address patient, address doctor);\n    event AppointmentRequested(address patient, address doctor, string date, string time);\n\n    // Check if the healthcare doctors are authorized\n    modifier onlyAuthorizedDoctors(address _patient) {\n        require(\n            patients[_patient].authorizedDoctors[msg.sender],\n            \"You are not authorized to view this record\"\n        );\n        _;\n    }\n\n    // Only the admin is authorized\n    modifier onlyAdmin(address _admin) {\n      require(_admin == 0x49745EF0F5E06f3e0d3F6CcB590F100726202011, \"Not authorized: Only the admin can perform this action\");\n      _;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}